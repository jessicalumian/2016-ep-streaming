{
    "contents" : "# 10-01-15 Benchmarking project\n\n# Data from: literate resting eel pond protocol\n# https://github.com/dib-lab/literate-resting/blob/master/kp/eel-pond.rst\n\n# Gathered with sar in README, assimilated with extract.py from sartre\n# https://github.com/ctb/sartre\n\n\n## TO DO ##\n# drop .0 from RAM y axis\n# finish comp graphs\n# clean up y axis on trimer graphs\n# clean up x axis on comp graphs\n# clean up y axis on comp graphs\n# put everything on github\n\n# Install ggplot\ninstall.packages(\"ggplot2\")\nlibrary(\"ggplot2\")\n\ninstall.packages(\"gridExtra\")\nlibrary(\"gridExtra\")\n\n## EEL POND WITHOUT STREAMING, ANNOTATED ##\n\n# Load space-separated data, rename columns, view\n\nlog.data <- read.table(\"~/benchmarking/nonstreaming/log.out\") \ncolnames(log.data) <- c(\"TIME\", \"CPU\",\"RAM\",\"DISK\",\"5\",\"6\",\"7\",\"8\")\n#head(log.data)\n\n# Divide RAM column to get from bytes to MB, view\n\nlog.data$RAM <- log.data$RAM/1e6\nlog.data$DISK <- log.data$DISK/1e2\n#head(log.data)\n\n# Plot each graph (cpu, ram, disk) separately,\n# add annotations by redefining with <name>a, \n# then use grid.arrange to stack <name>a graphs\n\ncpuplot <- ggplot(data=log.data, aes_string(x=\"TIME\", y=\"CPU\")) + \n  geom_line(color = \"blue\") + xlab(\"\") + ylab(\"CPU load (100%)\") +\n  ggtitle(\"Eel Pond (1-3) Without Streaming 10-23-15\") + theme(axis.text.x = \n  element_blank(), axis.text.y = element_text(size = 13.5, color = \"black\", \n  face = \"bold\"), plot.title = element_text(face = \"bold\", size = 16))\n\ncpuplota <- cpuplot + annotate(\"text\", x = 60, y = 90, label = \"QC\") +\n  annotate(\"rect\", xmin = 40, xmax = 80, ymin = 0, ymax = 100,\n            fill = \"magenta\", alpha = .2) +\n  annotate(\"text\", x = 300, y = 60, label = \"diginorm\") +\n  annotate(\"rect\", xmin = 170, xmax = 450, ymin = 0, ymax = 100,\n           fill = \"purple\", alpha = .2) +\n  annotate(\"text\", x =  580, y = 30, label = \"assembly\") +\n  annotate(\"rect\", xmin = 450, xmax = 640, ymin = 0, ymax = 100,\n           fill = \"orange\", alpha = .2) + expand_limits(y = 0)\n\nramplot <- ggplot(data=log.data, aes_string(x=\"TIME\", y=\"RAM\")) + \n  geom_line(color = \"red\") + xlab(\"\") + ylab(\"RAM (GB)\") +\n  theme(axis.text.x = element_blank(), axis.text.y = element_text(\n    size = 13.5, color = \"black\", face = \"bold\"))\n\nramplota <- ramplot  +\n  annotate(\"rect\", xmin = 40, xmax = 80, ymin = 0, ymax = 15,\n           fill = \"magenta\", alpha = .2) +\n  annotate(\"rect\", xmin = 170, xmax = 450, ymin = 0, ymax = 15,\n           fill = \"purple\", alpha = .2) +\n  annotate(\"rect\", xmin = 450, xmax = 640, ymin = 0, ymax = 15,\n           fill = \"orange\", alpha = .2) + expand_limits(y = 0)\n\ndiskplot <- ggplot(data=log.data, aes_string(x=\"TIME\", y=\"DISK\")) + \n  geom_line(color = \"green\") + xlab(\"Time (seconds)\") + ylab(\"Disk (kTPS)\") +\n  theme(axis.text.x = element_text(size = 16, color = \"black\", \n        face = \"bold\"), axis.text.y = element_text(size = 13.5, \n        color = \"black\", face = \"bold\"))\n\ndiskplota <- diskplot + \n  annotate(\"rect\", xmin = 40, xmax = 80, ymin = 0, ymax = 20,\n           fill = \"magenta\", alpha = .2) +\n  annotate(\"rect\", xmin = 170, xmax = 450, ymin = 0, ymax = 20,\n           fill = \"purple\", alpha = .2) +\n  annotate(\"rect\", xmin = 450, xmax = 640, ymin = 0, ymax = 20,\n           fill = \"orange\", alpha = .2) + expand_limits(y = 0)\n\n#grid.arrange(cpuplot,ramplot,diskplot)\ngrid.arrange(cpuplota,ramplota,diskplota)\n\n\n\n## EEL POND WITH STREAMING, ANNOTATED\n\n# Load data\n## Space-separated (no header assumed)\n\nlog.data <- read.table(\"~/benchmarking/streaming/raw-ouput/10-27-15/log.out\") # with header\ncolnames(log.data) <- c(\"TIME\", \"CPU\",\"RAM\",\"DISK\",\"5\",\"6\",\"7\",\"8\")\n\n# Divide RAM column by 1e6 to get from bytes to MB, DISK by 1e2\n\nlog.data$RAM <- log.data$RAM/1e6\nlog.data$DISK <- log.data$DISK/1e2\n\n# Plot each graph (cpu, ram, disk) separately, \n# then use grid.arrange to stack\n\ncpuplot <- ggplot(data=log.data, aes_string(x=\"TIME\", y=\"CPU\")) + \n  geom_line(color = \"blue\") + xlab(\"\") + ylab(\"CPU load (100%)\") +\n  ggtitle(\"Eel Pond (1-3) With Streaming 10-27-15 semistreaming khmer branch\") + theme(axis.text.x = \n  element_blank(), axis.text.y = element_text(size = 16, color = \"black\", \n  face = \"bold\"), plot.title = element_text(face = \"bold\", size = 13.5))\n\ncpuploty <- cpuplot + expand_limits(y = 0)\n\ncpuplotay <- cpuploty + annotate(\"text\", x = 60, y = 90, label = \"QC\") +\n  annotate(\"rect\", xmin = 40, xmax = 80, ymin = 0, ymax = 100,\n           fill = \"magenta\", alpha = .2) +\n  annotate(\"text\", x = 250, y = 60, label = \"diginorm\") +\n  annotate(\"rect\", xmin = 200, xmax = 330, ymin = 0, ymax = 100,\n           fill = \"purple\", alpha = .2) +\n  annotate(\"text\", x =  450, y = 30, label = \"assembly\") +\n  annotate(\"rect\", xmin = 330, xmax = 515, ymin = 0, ymax = 100,\n           fill = \"orange\", alpha = .2) + expand_limits(y = 0)\n\nramplot <- ggplot(data=log.data, aes_string(x=\"TIME\", y=\"RAM\")) + \n  geom_line(color = \"red\") + xlab(\"\") + ylab(\"RAM (GB)\") +\n  theme(axis.text.x = element_blank(), axis.text.y = element_text(\n    size = 13.5, color = \"black\", face = \"bold\"))\n\nramploty <- ramplot + expand_limits(y = 0)\n\nramplotay <- ramploty + \n  annotate(\"rect\", xmin = 40, xmax = 80, ymin = 0, ymax = 12.5,\n           fill = \"magenta\", alpha = .2) +\n  annotate(\"rect\", xmin = 200, xmax = 330, ymin = 0, ymax = 12.5,\n           fill = \"purple\", alpha = .2) +\n  annotate(\"rect\", xmin = 330, xmax = 515, ymin = 0, ymax = 12.5,\n           fill = \"orange\", alpha = .2) + expand_limits(y = 0)\n\ndiskplot <- ggplot(data=log.data, aes_string(x=\"TIME\", y=\"DISK\")) + \n  geom_line(color = \"green\") + xlab(\"Time (seconds)\") + ylab(\"Disk (kTPS)\") +\n  theme(axis.text.x = element_text(size = 20, color = \"black\", \n    face = \"bold\"), axis.text.y = element_text(size = 13.5, \n    color = \"black\", face = \"bold\"))\n\ndiskploty <- diskplot + expand_limits(y = 0)\n\ndiskplotay <- diskploty + \n  annotate(\"rect\", xmin = 40, xmax = 80, ymin = 0, ymax = 17,\n           fill = \"magenta\", alpha = .2) +\n  annotate(\"rect\", xmin = 200, xmax = 330, ymin = 0, ymax = 17,\n           fill = \"purple\", alpha = .2) +\n  annotate(\"rect\", xmin = 330, xmax = 515, ymin = 0, ymax = 17,\n           fill = \"orange\", alpha = .2) + expand_limits(y = 0)\n\n\ngrid.arrange(cpuplotay,ramplotay,diskplotay)\n\n\n\n ## Comparing CPU streaming vs nonstreaming ##\n\n# Load both logs, name columns specifying streaming or non, correct CPU\n\nlog.data.nonstream <- read.table(\"~/benchmarking/nonstreaming/log.out\") \ncolnames(log.data.nonstream) <- c(\"TIMEns\", \"CPUns\",\"RAMns\",\"DISKns\",\"5\",\"6\",\"7\",\"8\")\n\nlog.data.stream <- read.table(\"~/benchmarking/streaming/raw-ouput/10-27-15/log.out\") \ncolnames(log.data.stream) <- c(\"TIMEs\", \"CPUs\",\"RAMs\",\"DISKs\",\"5\",\"6\",\"7\",\"8\")\n\n# Create plots, then have <plot>.x to force both plots to have same \n# x axis and force y axis to start at 0\n\ncpuplot.stream <- ggplot(data=log.data.stream, aes_string(x=\"TIMEs\", y=\"CPUs\")) + \n  geom_line(color = \"blue\") + xlab(\"\") + ylab(\"Streaming\") +\n  ggtitle(\"Eel Pond (1-3) CPU Load Streaming vs Nonstreaming\") + theme(axis.text.x = \n  element_blank(), axis.text.y = element_text(size = 16, color = \"black\", \n  face = \"bold\"), plot.title = element_text(face = \"bold\", size = 13.5))\n\n# Create new plot to fix axis, then another \n# to annotate with text and shading\n\ncpuplot.streamx <-  cpuplot.stream + xlim(0, 650)\n\ncpuplot.streamax <- cpuplot.streamx + annotate(\"text\", x = 60, y = 90, label = \"QC\") +\n  annotate(\"rect\", xmin = 44, xmax = 76, ymin = 0, ymax = 100,\n           fill = \"magenta\", alpha = .2) +\n  annotate(\"text\", x = 260, y = 60, label = \"diginorm\") +\n  annotate(\"rect\", xmin = 200, xmax = 320, ymin = 0, ymax = 100,\n           fill = \"purple\", alpha = .2) +\n  annotate(\"text\", x =  550, y = 30, label = \"assembly\") +\n  annotate(\"rect\", xmin = 320, xmax = 520, ymin = 0, ymax = 100,\n           fill = \"orange\", alpha = .2) + expand_limits(y = 0)\n\ncpuplot.nonstream <- ggplot(data=log.data.nonstream, aes_string(x=\"TIMEns\", y=\"CPUns\")) + \n  geom_line(color = \"blue\") + xlab(\"Time (seconds)\") + ylab(\"Nonstreaming\") +\n  theme(axis.text.y = element_text(size = 16, color = \"black\", face = \"bold\"),\n        axis.text.x = element_text(size = 16, color = \"black\", \n                                         face = \"bold\")) \n\ncpuplot.nonstreamx <- cpuplot.nonstream + xlim(0, 650)\n\ncpuplot.nonstreamax <- cpuplot.nonstreamx + annotate(\"text\", x = 60, y = 90, label = \"QC\") +\n  annotate(\"rect\", xmin = 44, xmax = 76, ymin = 0, ymax = 100,\n           fill = \"magenta\", alpha = .2) +\n  annotate(\"text\", x = 370, y = 60, label = \"diginorm\") +\n  annotate(\"rect\", xmin = 260, xmax = 450, ymin = 0, ymax = 100,\n           fill = \"purple\", alpha = .2) +\n  annotate(\"text\", x =  590, y = 30, label = \"assembly\") +\n  annotate(\"rect\", xmin = 450, xmax = 640, ymin = 0, ymax = 100,\n           fill = \"orange\", alpha = .2) + expand_limits(y = 0)\n\n# grid.arrange to stack graphs, textGrob for common y axis label\n\ngrid.arrange(cpuplot.streamax, cpuplot.nonstreamax,\n  left = textGrob(\"CPU (100%)\", rot = 90, vjust = 1, \n  gp = gpar(fontface = \"bold\")))\n\n\n## Comparing RAM streaming vs nonstreaming ##\n\n# Load both logs, name columns specifying streaming or non, correct RAM\n\nlog.data.nonstream <- read.table(\"~/benchmarking/nonstreaming/log.out\") \ncolnames(log.data.nonstream) <- c(\"TIMEns\", \"CPUns\",\"RAMns\",\"DISKns\",\"5\",\"6\",\"7\",\"8\")\nlog.data.nonstream$RAMns <- log.data.nonstream$RAMns/1e6\n\nlog.data.stream <- read.table(\"~/benchmarking/streaming/raw-ouput/10-27-15/log.out\") \ncolnames(log.data.stream) <- c(\"TIMEs\", \"CPUs\",\"RAMs\",\"DISKs\",\"5\",\"6\",\"7\",\"8\")\nlog.data.stream$RAMs <- log.data.stream$RAMs/1e6\n\n# Create plots, then have <plot>.x to force both plots to have same \n# x axis and force y axis to start at 0\n\nramplot.stream <- ggplot(data=log.data.stream, aes_string(x=\"TIMEs\", y=\"RAMs\")) + \n  geom_line(color = \"red\") + xlab(\"\") + ylab(\"Streaming RAM\") +\n  ggtitle(\"Eel Pond (1-3) RAM Streaming vs Nonstreaming\") + theme(axis.text.x = \n  element_blank(), axis.text.y = element_text(size = 16, color = \"black\", \n  face = \"bold\"), plot.title = element_text(face = \"bold\", size = 13.5))\n\n# Create new plot to fix axis, then another \n# to annotate with text and shading\n\nramplot.streamx <-  ramplot.stream + xlim(0, 650) + ylim(0, 13)\n\nramplot.streamax <- ramplot.streamx + annotate(\"text\", x = 50, y = 7, label = \"QC\") +\n  annotate(\"rect\", xmin = 44, xmax = 76, ymin = 0, ymax = 13,\n           fill = \"magenta\", alpha = .2) +\n  annotate(\"text\", x = 260, y = 60, label = \"diginorm\") +\n  annotate(\"rect\", xmin = 200, xmax = 320, ymin = 0, ymax = 13,\n           fill = \"purple\", alpha = .2) +\n  annotate(\"text\", x =  450, y = 30, label = \"assembly\") +\n  annotate(\"rect\", xmin = 320, xmax = 520, ymin = 0, ymax = 13,\n           fill = \"orange\", alpha = .2) + expand_limits(y = 0)\n\nramplot.nonstream <- ggplot(data=log.data.nonstream, aes_string(x=\"TIMEns\", y=\"RAMns\")) + \n  geom_line(color = \"red\") + xlab(\"Time (seconds)\") + ylab(\"Nonstreaming\") +\n  theme(axis.text.y = element_text(size = 16, color = \"black\", face = \"bold\"),\n        axis.text.x = element_text(size = 16, color = \"black\", \n        face = \"bold\")) \n\n# Create new plot to fix axis, then another \n# to annotate with text and shading\n\nramplot.nonstreamx <- ramplot.nonstream + xlim(0, 650) + ylim(0, 13)\n\nramplot.nonstreamax <- ramplot.nonstreamx + annotate(\"text\", x = 60, y = 7, label = \"QC\") +\n  annotate(\"rect\", xmin = 44, xmax = 76, ymin = 0, ymax = 13,\n           fill = \"magenta\", alpha = .2) +\n  annotate(\"text\", x = 370, y = 7, label = \"diginorm\") +\n  annotate(\"rect\", xmin = 260, xmax = 450, ymin = 0, ymax = 13,\n           fill = \"purple\", alpha = .2) +\n  annotate(\"text\", x =  590, y = 7, label = \"assembly\") +\n  annotate(\"rect\", xmin = 450, xmax = 640, ymin = 0, ymax = 13,\n           fill = \"orange\", alpha = .2) + expand_limits(y = 0)\n\n# grid.arrange to stack graphs, textGrob for common y axis label\n\ngrid.arrange(ramplot.streamax, ramplot.nonstreamax,\n             left = textGrob(\"RAM (GB)\", rot = 90, vjust = 1, \n                             gp = gpar(fontface = \"bold\")))\n\n\n## Comparing DISK streaming vs nonstreaming ##\n\n# Load both logs, name columns specifying streaming or non, correct disk\n\nlog.data.nonstream <- read.table(\"~/benchmarking/nonstreaming/log.out\") \ncolnames(log.data.nonstream) <- c(\"TIMEns\", \"CPUns\",\"RAMns\",\"DISKns\",\"5\",\"6\",\"7\",\"8\")\nlog.data.nonstream$DISKns <- log.data.nonstream$DISKns/1e2\n\nlog.data.stream <- read.table(\"~/benchmarking/streaming/raw-ouput/10-27-15/log.out\") \ncolnames(log.data.stream) <- c(\"TIMEs\", \"CPUs\",\"RAMs\",\"DISKs\",\"5\",\"6\",\"7\",\"8\")\nlog.data.stream$DISKs <- log.data.stream$DISKs/1e2\n\n# Create plots, then have <plot>.x to force both plots to have same \n# x axis and force y axis to start at 0\n\ndiskplot.stream <- ggplot(data=log.data.stream, aes_string(x=\"TIMEs\", y=\"DISKs\")) + \n  geom_line(color = \"green\") + xlab(\"\") + ylab(\"Streaming\") +\n  ggtitle(\"Eel Pond (1-3) Disk Streaming vs Nonstreaming\") + theme(axis.text.x = \n  element_blank(), axis.text.y = element_text(size = 16, color = \"black\", \n  face = \"bold\"), plot.title = element_text(face = \"bold\", size = 13.5))\n\ndiskplot.streamx <-  diskplot.stream + xlim(0, 650) + expand_limits(y = 0)\n\ndiskplot.nonstream <- ggplot(data=log.data.nonstream, aes_string(x=\"TIMEns\", y=\"DISKns\")) + \n  geom_line(color = \"green\") + xlab(\"Time (seconds)\") + ylab(\"Nonstreaming\") +\n  theme(axis.text.y = element_text(size = 16, color = \"black\", face = \"bold\"),\n        axis.text.x = element_text(size = 16, color = \"black\", \n                                         face = \"bold\"))\n\ndiskplot.nonstreamx <- diskplot.nonstream + xlim(0, 650) + expand_limits(y = 0)\n\n# grid.arrange to stack graphs, textGrob for common y axis label\n\ngrid.arrange(diskplot.streamx, diskplot.nonstreamx,\n  left = textGrob(\"Disk (kTPS)\", rot = 90, vjust = 1, \n                  gp = gpar(fontface = \"bold\")))\n\n",
    "created" : 1443743859387.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3795924365",
    "id" : "56901C7A",
    "lastKnownWriteTime" : 1447814147,
    "path" : "~/benchmarking/benchmarking-10-01-15/plots.R",
    "project_path" : "plots.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}